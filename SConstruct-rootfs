# -*- python -*-
import os
import sys
import string
Import('*')

##### Construct the tar.gz which needed by rootfs.
## include: 
#           #bindir/root.step1.tar.gz
#           #bindir/root.bootscripts.tar.gz
#           #bindir/kmodules-x.xx.xx.tar.bz2
#           #bindir/mi-vmlinuz-x.xx.xx  (needed by iso)
SConscript('buildpkg/SConscript')

##### mirootfs.gz
## #result/mirootfs.gz <- 
#               #bindir/root.step1.tar.gz
#               #bindir/root.src.tar.gz
#               #bindir/root.bootscripts.tar.gz
#               #bindir/kmodules-x.xx.xx.tar-bz2
class MirootfsMaker(PkgMaker.StepMaker):
    target_list = ['result/mirootfs.gz']
    ROOT = 'tmp/mi.rootfs'
    steps = [
             #'init_dir',
             'extract_bins',
#             'install_configfiles',
#             'install_tranlatefiles',
            ]
#    if use_cp_mode:
#        steps = steps + ['install_cpinstmode_UIxml',]
    steps+= [
             #'install_post',
             'run_post_scripts',
             'mkcramfs',
             ]

    def init_dir(self):
        # Check if $ROOT is your mount dir.
        if self.ROOT.startswith('/') or len(self.ROOT) == '':
            os.write(2, '%s can not start with / or blank.' % self.ROOT)
            sys.exit(-1)
        f = file('/proc/mounts')
        l = f.readline()
        ltodir = len('$ROOT')
        dangeous_mount = None
        while l:
            pieces = string.split(l, ' ')
            if pieces[1][:ltodir] == '$ROOT':
                os.write(2, 'DANGEOUS MOUNT: [%s]\n' % str(pieces[:2]))
                dangeous_mount = 'true'
            l = f.readline()
        if dangeous_mount:
            os.write(2, 'Please umount the previous mounts firstly!\n')
            sys.exit(-1)

        cmds = ['sudo rm -rf $ROOT $sudoprom',
                'mkdir -p $ROOT']
        return [], cmds

    def extract_bins(self):
        toextract = ['bindir/root.step1.tar.gz',
                     'bindir/root.src.tar.gz',
                     'bindir/root.bootscripts.tar.gz',
                     'bindir/kmodules-${mikernelver}.tar.bz2']

        #if mi_config.useudev:
        #    toextract.append('bindir/udev-${udev_version}.tar.bz2')
        mkstep2_script = 'scripts/mkstep2.py'
        # Use sudo, because we use root to create the root.step1.tar.gz .
        # If we use other user to extract the root.step1.tar.gz, the files
        # permision will change.(We create the root.step1.tar.gz and other
        # rootfs tar packages use root user, only correspond with the
        # files' permision, so be careful with your system.:P )
        cmds = [getSudoSh( 'sudo $pythonbin %s $udev_arg %s $sudoprom' % \
                (mkstep2_script,
                 ' '.join(toextract)) )]
        return toextract + [mkstep2_script], cmds

    def run_post_scripts(self):
        cmds = [getSudoSh("buildpkg/post_scripts/commands.sh $ROOT"),
                getSudoSh("install -m 777 buildpkg/post_scripts/commands_chroot.sh $ROOT"),
                getSudoSh('chroot $ROOT /commands_chroot.sh'),
                getSudoSh('rm $ROOT/commands_chroot.sh'),
            ]
        return [], cmds

## FIXME : should place it in to magicinstaller(src) etc #dir(root.src.etc.tar.gz)
#    def install_configfiles(self):
#        configfiles = [('#src/magic.installer/mipublic.py',
#                        '$ROOT/$pythondir/site-packages/'),
#
#                       ('#src/magic.installer/magic.autopart.xml',
#                        '$ROOT/usr/share/MagicInstaller/')]
#        slist = []
#        cmds = []
#        for src, dest in configfiles:
#            slist.append(src)
#            cmds.extend(['mkdir -p %s' % dest,
#                         'cp -a %s %s' % (src, dest)])
#        return slist, cmds

#    def install_tranlatefiles(self):
#        slist = []
#        cmds = []
#        for lang in mi_config.all_linguas:
#            inst_file = 'src/magic.installer/po/%s.mo' % lang
#            dest_file = '$ROOT/usr/share/locale/%s/LC_MESSAGES/${textdomain}.mo' % lang
#            slist.append(inst_file)
#            cmds.extend(['mkdir -p %s' % os.path.dirname(dest_file),
#                         'cp -a %s %s' % (inst_file, dest_file)])
#        return slist, cmds

#    def install_cpinstmode_UIxml(self):
#        slist = []
#        cmds = []
#        inst_file = 'src/magic.installer/UIxml/takeactions.xml.cpinstmode'
#        dest_file = '$ROOT$root_datadir/UIxml/takeactions.xml'
#        slist.append(inst_file)
#        cmds.extend(['mkdir -p %s' % os.path.dirname(dest_file),
#                         'cp -a %s %s' % (inst_file, dest_file)])
#        return slist, cmds

#    def install_post(self):
#        env = self.env
#        post_script = '$specdir/post_install.sh'
#        if os.path.exists(env.subst(post_script)):
#            cmds = ['cp %s $ROOT/root' % post_script,
#                    'chmod 700 $ROOT/root/post_install.sh']
#            return [post_script], cmds
#        else:
#            return [], []

    def mkcramfs(self):
        cmds = ['mkdir -p result',
                'cd $ROOT && %s' % getSudoSh("find . | cpio -o -H newc | gzip -9 > $TARGET.abspath")]
        return [], cmds

mirootfs = MirootfsMaker(env)
mirootfs.make()

