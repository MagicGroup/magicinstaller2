# -*- python -*-
# Copyright (C) 2007, MagicLinux.
# Author:  Yang Zhang <zy.netsec@gmail.com>
# All rights reserved.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANT; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public LIcense for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, 59 Temple
# Place - Suite 330, Boston, MA 02111-1307, USA.

import os
import stat
import sys, glob
from SCons.Action import ActionFactory
from xml.dom.minidom import parse

Import('env', 'mi_config', 'MiPkgMaker', 'PkgMaker', 'getSudoSh')

def line_split(lines):
    result = []
    for line in lines.split('\n'):
        line = line.strip()
        if line and line[0] != '#':
            result.append(line)
    return result

def get_node_value(node, name):
    value = ''
    for subnode in node.childNodes:
        if subnode.nodeType == subnode.ELEMENT_NODE \
           and subnode.tagName == name:
            value = ''.join([t.data for t in subnode.childNodes \
                             if t.nodeType == t.TEXT_NODE])
    return line_split(value)

class RootBuildTheme(PkgMaker.BaseMaker):
    def __init__(self, mod, env):
        self.source_list = source_list = []
        self.build_cmds = cmds = []

        source_list.append(mod + '.xml')
        themesdoc = parse(source_list[-1])
        cmds.extend(['mkdir -p $ROOT/etc/gtk-2.0/pics',
                     'mkdir -p $ROOT/usr/share/themes',
                     'cp ${pwd}/%s $ROOT/etc/gtk-2.0/' % source_list[-1]])

        for themenode in themesdoc.getElementsByTagName('theme'):
            dir = themenode.getAttribute('dir')
            tar = themenode.getAttribute('tar')
            if dir and tar:
                source_list.append('$source_prefix/themes/' + tar)
                cmds.extend(self.get_extract_cmd([source_list[-1]], '$ROOT/usr/share/themes'))
            pic = themenode.getAttribute('pic')
            if pic:
                source_list.append('$source_prefix/themes/' + pic)
                cmds.extend(['cp %s $ROOT/etc/gtk-2.0/pics/' % source_list[-1]])
        cmds.extend(['find $ROOT/usr/share/themes -name "*~" | xargs rm -f'])

class RootBuildNode(PkgMaker.BaseMaker):
    def __init__(self, mod, env):
        self.env = env
        self.source_list = source_list = []
        self.build_cmds = cmds = []

        source_list.append(mod + '.xml')
        try:
            rootdoc = parse(source_list[-1])
        except:
            print 'Parser mod %s.xml failed!' % mod
            raise

        # init
        cmds.extend(['rm -rf $BUILD',
                     'mkdir -p $BUILD'])
        inst_list = []
        pre_list = []
        post_list = []

        for pkgnode in rootdoc.getElementsByTagName('package'):
            pkgfiles_orig = get_node_value(pkgnode, 'files')
            if pkgfiles_orig:
                pkgfiles = []
                #pkgfiles = self.path_prefix('$source_list_pkg', pkgfiles_orig)
                for pkgfile in pkgfiles_orig:
                    pkg_path = self.search_file(pkgfile, ['$source_prefix_pkg', '$source_prefix'])
                    if pkg_path:
                        pkgfiles.append(pkg_path)
                    else:
                        print "Can not find the package %s" % pkgfile
                        sys.exit(1)

                source_list.extend(pkgfiles)
                # extract
                cmds.extend(self.get_extract_cmd(pkgfiles, '$build_prefix'))
            inst_list.extend(get_node_value(pkgnode, 'install'))
            pre_list.extend(get_node_value(pkgnode, 'pre_action'))
            post_list.extend(get_node_value(pkgnode, 'post_action'))

        # pre_action
        cmds.extend(pre_list)
        # install
        for f in inst_list:
            if f[0] == '+':             # mkdir only
                f = f[1:]
                cmds.extend(['mkdir -p $ROOT/%s' % f])

            elif f[0] == '@':           # recursive
                f = f[1:]
                cmds.extend(['mkdir -p $ROOT/%s' % os.path.dirname(f),
                             'cp -a $BUILD/%s $ROOT/%s/' % (f, os.path.dirname(f))])
            else:
                cmds.extend(['mkdir -p $ROOT/%s' % os.path.dirname(f),
                             'cp -dp $BUILD/%s $ROOT/%s/' % (f, os.path.dirname(f))])
        # post_action
        cmds.extend(post_list)

    def search_file(self, filename, pathes):
        for p in pathes:
            f = os.path.join(p, filename)
            f = self.env.subst(f)
            files = glob.glob(f)
            if files and os.access(files[0], os.R_OK):
                return files[0]

class RootPkgMaker(MiPkgMaker):
    source_prefix = '#bindir/root_ext'
    source_prefix_pkg = '#bindir/root_pkg'

    build_root =  mi_config.tmpdir
    build_prefix = '$build_root/${package}.tmp'
    install_prefix = '$build_root/${package}'
    pack_prefix = '#bindir'

    build_cmds = []
    mods = []
    global_post_cmds = []

    def initenv(self):
        MiPkgMaker.initenv(self)
        env = self.env
        env['ROOT'] = self.get_abspath(env['install_prefix'])
        env['BUILD'] = self.get_abspath(env['build_prefix'])
        env['source_prefix_pkg'] = self.get_abspath(self.source_prefix_pkg)

        self.parse_def_mods()

    def parse_def_mods(self):
        raise NotImplementedError()

    def build(self):
        env = self.env
        for mod in self.mods:
            self.build_cmds.extend(mod.build_cmds)
            self.source_list.extend(mod.source_list)
        env.Alias(self.alias,
                  env.Command('$pack_prefix/$package_bin',
                              self.source_list,
                              [getSudoSh('rm -rf $ROOT'),
                               'mkdir -p $ROOT'] +
                              self.build_cmds +
                              self.global_post_cmds +
                              [getSudoSh('chown -R root $ROOT')] +
                              [getSudoSh('chgrp -R root $ROOT')] +
                              [getSudoSh(self.fetch_pack_cmds()[0])] +
                              ['rm -rf $BUILD']))

    def make(self):
        self.initenv()
        self.build()

class RootArch1Maker(RootPkgMaker):
    alias = 'root.arch1'
    package = 'root.arch1'
    package_bin = '${package}.tar.gz'

    global_post_cmds = [PkgMaker.SearchExecAction('$ROOT',
                                                  ['usr/lib/xorg/modules', 'lib/modules'],
                                                  'strip %s')]

    def parse_def_mods(self):
        mods = self.mods
        #mod_srcs = glob.glob("*.xml")
        #mod_srcs = [ os.path.splitext(x)[0] for x in mod_srcs ]
        #for mod_src in mod_srcs:
        #    mods.append(RootBuildNode(mod_src, self.env))
        for mod_src in ['filesystem',
                        'glibc',
                        'syslib',
                        'busybox',
                        'bash',
                        'python',
                        'xorg',
                        'gtk2',
                        'parted',
                        #'rhpl',
                        'rpm',
                        #'debug',
                        #'mkfs',
                        #'udev',
                        #'kudzu',
                        #'pyudev',
                        #'grub',
                        #'trace',
                        #'post_scripts',
                        ]:
            mods.append(RootBuildNode(mod_src, self.env))
        # theme is special
        #mods.append(RootBuildTheme('themes', self.env))

pkg = RootArch1Maker(env)
pkg.make()
env.Command('#bindir/root.step1.tar.gz', 'root.arch1',
        '[ -L $TARGET ] && rm $TARGET; ln -sv %s.tar.gz $TARGET' % pkg.package)
