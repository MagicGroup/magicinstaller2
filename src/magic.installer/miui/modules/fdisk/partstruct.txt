为了明确分区代码的功能和实现，有必要首先明确分区的数据结构、支持
什么样的分区表、等信息。

分区及分区表结构：

所有分区均以柱面为边界。具体地说，分区可能从某柱面的零号磁头、一号扇
区开始，也可能从此柱面的一号磁头，一号扇区开始。分区一定结束于某柱面
的最后一个磁头，最后一个扇区。

在所有实际占据空间的分区中(即除扩展分区以外的分区)，根据分区起始点的
不同，可以把分区分为零磁头起始分区和一磁头起始分区两类。第一个主分区
和所有的逻辑分区都是一磁头起始分区，第二至第四个主分区则都是零磁头起
始分区。

主分区表保存在块设备的零柱面、零磁头、零扇区的 0x1be ~ 0x1fe 字节。
共有四个分区条目，每个条目占用 16 个字节。

扩展分区分区表包存在某个柱面的零磁头、零扇区的 0x1be ~ 0x1fe 字节。

所有分区条目的格式都相同，它的 16 个字节的含义如下：
第 1 个字节：0x0 表示非活跃分区，0x80 表示活跃分区。其它值为非法；
第 2 个字节：表示起始磁头号；
第 3 个字节：第 0 至第 5 位表示起始扇区号。第 6 、7 位则给出起始柱面
号的最高两位；
第 4 个字节：给出起始柱面号的低 8 位；
第 5 个字节：给出分区类型号；
第 6 个字节：表示终止磁头号
第 7 个字节：第 0 至第 5 位表示终止扇区号。第 6 、7 位则给出终止柱面
号的最高两位；
第 8 个字节：给出终止柱面好的低 8 位；
第 9 - 12 个字节：以 little-endian 的形式给出起始扇区序号；
第 13 - 16 个字节：以 little-endian 的形式给出分区所占用的扇区数；

从现实的角度考虑，能够被广泛识别的分区表结构必须满足以下条件：
1、主分区表中只含有一个扩展分区；
2、所有扩展分区的分区表中，只含有一个逻辑分区，至多含有下一个扩展分区。

因此，MagicInstaller 同样只识别满足这样条件的分区表。并且 MagicInstaller
生成的分区表，也必须满足这一条件。
